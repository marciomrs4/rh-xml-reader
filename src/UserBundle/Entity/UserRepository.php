<?php

namespace UserBundle\Entity;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;


class UserRepository extends \Doctrine\ORM\EntityRepository implements UserProviderInterface
{

    public function findOneByUserName($user)
    {
        return $this->createQueryBuilder('u')
            ->where("u.username = :username or u.email = :email")
            ->setParameter('username',$user)
            ->setParameter('email',$user)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function getQUalquerCoisaQueEuQUero()
    {
        //return $this->findAll();

        return $this->createQueryBuilder('U')
            ->select('U.username','U.email')
            ->getQuery()
            ->getResult();

    }

    /**
     * Loads the user for the given username.
     *
     * This method must throw UsernameNotFoundException if the user is not
     * found.
     *
     * @param string $username The username
     *
     * @return UserInterface
     *
     * @throws UsernameNotFoundException if the user is not found
     */
    public function loadUserByUsername($username)
    {
        $user = $this->findOneByUserName($username);

        if(!$user){
            throw new UsernameNotFoundException('User Not Found !');
        }

        return $user;
    }

    /**
     * Refreshes the user for the account interface.
     *
     * It is up to the implementation to decide if the user data should be
     * totally reloaded (e.g. from the database), or if the UserInterface
     * object can just be merged into some internal array of users / identity
     * map.
     *
     * @param UserInterface $user
     *
     * @return UserInterface
     *
     * @throws UnsupportedUserException if the account is not supported
     */
    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);

        if(!$this->supportsClass($class)){
            throw new UnsupportedUserException("Class not suported: {$class}");
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    /**
     * Whether this provider supports the given user class.
     *
     * @param string $class
     *
     * @return bool
     */
    public function supportsClass($class)
    {
        return $this->getEntityName() == $class;
    }
}
